version: '3.8'

services:
  # 歩みサポート (Ayumi Support) Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - .env.production
    volumes:
      - uploads_data:/app/uploads
      - generated_data:/app/generated
      - app_logs:/app/logs
    environment:
      - NODE_ENV=production
      - PORT=3000
    restart: always
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - ayumi-support-network

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      app:
        condition: service_healthy
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - ayumi-support-network

  # PostgreSQL Database (for development/staging)
  # Note: In production, use AWS RDS instead
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=ayumi_support_prod
      - POSTGRES_USER=ayumi_support_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    secrets:
      - postgres_password
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ayumi_support_user -d ayumi_support_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - ayumi-support-network

  # Redis for Session Management and Caching
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass "${REDIS_PASSWORD:-defaultpassword}"
    volumes:
      - redis_data:/data
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    networks:
      - ayumi-support-network

  # CloudWatch Agent for AWS Monitoring
  cloudwatch:
    image: amazon/cloudwatch-agent:latest
    env_file:
      - .env.production
    volumes:
      - ./aws/cloudwatch-config.json:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:ro
      - app_logs:/aws/app/logs:ro
      - nginx_logs:/aws/nginx/logs:ro
    environment:
      - AWS_REGION=${AWS_REGION:-ap-northeast-1}
    restart: always
    depends_on:
      - app
    networks:
      - ayumi-support-network

volumes:
  uploads_data:
    driver: local
  generated_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt

networks:
  ayumi-support-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16